package main
import (
	"crypto/des"
	"crypto/cipher"
	"fmt"
	"bytes"
	"encoding/base64"
	"strings"
)

/*******************************************
DES加密方式
CBC方式时，第一个块使用默认密钥，后面的块使用前面块的加密数据做密钥
ECB方式时，使用统一的密钥

*时间：2016/6/28 20:34
*******************************************/

func main() {
	str := "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"

	str = strings.Replace(str, " ", "", -1)			//去除无效字符空格，目前golang base64包存在此问题，没有将空格删除，导致des解码的失败

	input, err := base64.StdEncoding.DecodeString(str)

	key := []byte("changxinganhui2016*04*19")
	iv := []byte("AW5Ed54w")			//CBC方式解码时，如果此iv错误，可以发现结果的前面一部分解成了错误的码，后面的部分解码是正确的。这是由于CBC
	// 使用前面部分加密的结果作为自己的向量。这样就导致了前面部分会出错，后面的部分一定会正确
	origData, err := TripleDesDecrypt(input, key, iv)
	if err != nil {
		fmt.Println(err.Error())
		return
	}

	fmt.Println(string(origData))

}

// 3DES解密
//func test3Des() {
//	key := []byte("sfe023f_sefiel#fi32lf3e!")
//	result, err := TripleDesEncrypt([]byte("polaris@studygol"), key)
//	if err != nil {
//		panic(err)
//	}
//	fmt.Println(base64.StdEncoding.EncodeToString(result))
//	origData, err := TripleDesDecrypt(result, key, iv )
//	if err != nil {
//		panic(err)
//	}
//	fmt.Println(string(origData))
//}


// 3DES加密
func TripleDesEncrypt(origData, key []byte) ([]byte, error) {
	block, err := des.NewTripleDESCipher(key)
	if err != nil {
		return nil, err
	}
	origData = PKCS5Padding(origData, block.BlockSize())
	// origData = ZeroPadding(origData, block.BlockSize())
	blockMode := cipher.NewCBCEncrypter(block, key[:8])
	crypted := make([]byte, len(origData))
	blockMode.CryptBlocks(crypted, origData)
	return crypted, nil
}

// 3DES解密
func TripleDesDecrypt(crypted, key, iv []byte) ([]byte, error) {
	block, err := des.NewTripleDESCipher(key)
	if err != nil {
		return nil, err
	}
	blockMode := cipher.NewCBCDecrypter(block, iv)
	origData := make([]byte, len(crypted))
	// origData := crypted
	blockMode.CryptBlocks(origData, crypted)
	origData = PKCS5UnPadding(origData)
	// origData = ZeroUnPadding(origData)
	return origData, nil
}


func PKCS5Padding(ciphertext []byte, blockSize int) []byte {
	padding := blockSize - len(ciphertext) % blockSize
	padtext := bytes.Repeat([]byte{byte(padding)}, padding)
	return append(ciphertext, padtext...)
}

func PKCS5UnPadding(origData []byte) []byte {
	length := len(origData)
	// 去掉最后一个字节 unpadding 次
	unpadding := int(origData[length - 1])
	return origData[:(length - unpadding)]
}


